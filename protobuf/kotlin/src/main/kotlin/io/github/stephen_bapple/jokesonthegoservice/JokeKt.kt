// Generated by the protocol buffer compiler. DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: protobuf/jokeserver.proto

// Generated files should ignore deprecation warnings
@file:Suppress("DEPRECATION")
package io.github.stephen_bapple.jokesonthegoservice;

@kotlin.jvm.JvmName("-initializejoke")
public inline fun joke(block: io.github.stephen_bapple.jokesonthegoservice.JokeKt.Dsl.() -> kotlin.Unit): io.github.stephen_bapple.jokesonthegoservice.Joke =
  io.github.stephen_bapple.jokesonthegoservice.JokeKt.Dsl._create(io.github.stephen_bapple.jokesonthegoservice.Joke.newBuilder()).apply { block() }._build()
/**
 * Protobuf type `jokeserver.Joke`
 */
public object JokeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  public class Dsl private constructor(
    private val _builder: io.github.stephen_bapple.jokesonthegoservice.Joke.Builder
  ) {
    public companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.github.stephen_bapple.jokesonthegoservice.Joke.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.github.stephen_bapple.jokesonthegoservice.Joke = _builder.build()

    /**
     * `string setup = 1;`
     */
    public var setup: kotlin.String
      @JvmName("getSetup")
      get() = _builder.getSetup()
      @JvmName("setSetup")
      set(value) {
        _builder.setSetup(value)
      }
    /**
     * `string setup = 1;`
     */
    public fun clearSetup() {
      _builder.clearSetup()
    }

    /**
     * `string punchline = 2;`
     */
    public var punchline: kotlin.String
      @JvmName("getPunchline")
      get() = _builder.getPunchline()
      @JvmName("setPunchline")
      set(value) {
        _builder.setPunchline(value)
      }
    /**
     * `string punchline = 2;`
     */
    public fun clearPunchline() {
      _builder.clearPunchline()
    }
  }
}
@kotlin.jvm.JvmSynthetic
public inline fun io.github.stephen_bapple.jokesonthegoservice.Joke.copy(block: `io.github.stephen_bapple.jokesonthegoservice`.JokeKt.Dsl.() -> kotlin.Unit): io.github.stephen_bapple.jokesonthegoservice.Joke =
  `io.github.stephen_bapple.jokesonthegoservice`.JokeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

